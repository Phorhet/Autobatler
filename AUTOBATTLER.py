import random
import time
import json
import os


class Color:
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    MAGENTA = '\033[95m'
    BLUE = '\033[94m'
    GRAY = '\033[90m'
    BOLD = '\033[1m'
    RESET = '\033[0m'


WEAPONS = [
    {"name": "–ú–µ—á", "damage": 3, "type": "–†—É–±—è—â–∏–π"},
    {"name": "–î—É–±–∏–Ω–∞", "damage": 3, "type": "–î—Ä–æ–±—è—â–∏–π"},
    {"name": "–ö–∏–Ω–∂–∞–ª", "damage": 2, "type": "–ö–æ–ª—é—â–∏–π"},
    {"name": "–¢–æ–ø–æ—Ä", "damage": 4, "type": "–†—É–±—è—â–∏–π"},
    {"name": "–ö–æ–ø—å—ë", "damage": 3, "type": "–ö–æ–ª—é—â–∏–π"},
    {"name": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–µ—á", "damage": 10, "type": "–†—É–±—è—â–∏–π"}
]

MONSTERS = [
    {
        "name": "–ì–æ–±–ª–∏–Ω",
        "health": 5,
        "weapon_damage": 2,
        "strength": 1,
        "agility": 1,
        "stamina": 1,
        "special": "",
        "reward": "–ö–∏–Ω–∂–∞–ª"
    },
    {
        "name": "–°–∫–µ–ª–µ—Ç",
        "health": 10,
        "weapon_damage": 2,
        "strength": 2,
        "agility": 2,
        "stamina": 1,
        "special": "–ü–æ–ª—É—á–∞–µ—Ç –≤–¥–≤–æ–µ –±–æ–ª—å—à–µ —É—Ä–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –±—å—é—Ç –¥—Ä–æ–±—è—â–∏–º –æ—Ä—É–∂–∏–µ–º",
        "reward": "–î—É–±–∏–Ω–∞"
    },
    {
        "name": "–°–ª–∞–π–º",
        "health": 8,
        "weapon_damage": 1,
        "strength": 3,
        "agility": 1,
        "stamina": 2,
        "special": "–†—É–±—è—â–µ–µ –æ—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–Ω–æ—Å–∏—Ç –µ–º—É —É—Ä–æ–Ω–∞ (–Ω–æ —É—Ä–æ–Ω –æ—Ç —Å–∏–ª—ã –∏ –ø—Ä–æ—á–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç)",
        "reward": "–ö–æ–ø—å—ë"
    },
    {
        "name": "–ü—Ä–∏–∑—Ä–∞–∫",
        "health": 6,
        "weapon_damage": 3,
        "strength": 3,
        "agility": 1,
        "stamina": 3,
        "special": "–ï—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å '—Å–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞', –∫–∞–∫ —É —Ä–∞–∑–±–æ–π–Ω–∏–∫–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è",
        "reward": "–ú–µ—á"
    },
    {
        "name": "–ì–æ–ª–µ–º",
        "health": 10,
        "weapon_damage": 1,
        "strength": 1,
        "agility": 3,
        "stamina": 1,
        "special": "–ï—Å—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å '–∫–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞', –∫–∞–∫ —É –í–∞—Ä–≤–∞—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è",
        "reward": "–¢–æ–ø–æ—Ä"
    },
    {
        "name": "–î—Ä–∞–∫–æ–Ω",
        "health": 20,
        "weapon_damage": 4,
        "strength": 4,
        "agility": 3,
        "stamina": 3,
        "special": "–ö–∞–∂–¥—ã–π 3-–π —Ö–æ–¥ –¥—ã—à–∏—Ç –æ–≥–Ω—ë–º, –Ω–∞–Ω–æ—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 3 —É—Ä–æ–Ω–∞",
        "reward": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ú–µ—á"
    }
]


class Character:
    def __init__(self, char_class):
        self.strength = random.randint(1, 3)
        self.agility = random.randint(1, 3)
        self.stamina = random.randint(1, 3)
        self.classes = {char_class: 1}
        self.weapon = self.get_starting_weapon(char_class)
        self.max_health = self.get_base_health() + self.stamina
        self.health = self.max_health

    def get_starting_weapon(self, char_class):
        weapon_map = {
            "–†–∞–∑–±–æ–π–Ω–∏–∫": "–ö–∏–Ω–∂–∞–ª",
            "–í–æ–∏–Ω": "–ú–µ—á",
            "–í–∞—Ä–≤–∞—Ä": "–î—É–±–∏–Ω–∞"
        }
        name = weapon_map[char_class]
        for w in WEAPONS:
            if w["name"] == name:
                return w
        return WEAPONS[0]

    def get_base_health(self):
        return {
            "–†–∞–∑–±–æ–π–Ω–∏–∫": 4,
            "–í–æ–∏–Ω": 5,
            "–í–∞—Ä–≤–∞—Ä": 6
        }[list(self.classes.keys())[0]]

    def get_total_level(self):
        return sum(self.classes.values())

    def get_base_damage(self):
        return self.weapon["damage"] + self.strength

    def calculate_total_damage(self, target, is_first_turn=False, move_count=1):
        base = self.get_base_damage()
        bonus = 0
        reasons = []

        for cls, lvl in self.classes.items():
            if cls == "–†–∞–∑–±–æ–π–Ω–∏–∫":
                if lvl >= 1 and self.agility > target.agility:
                    bonus += 1
                    reasons.append(f"–†–∞–∑–±–æ–π–Ω–∏–∫ L{lvl}: +1 —É—Ä–æ–Ω (—Å–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞)")
                if lvl >= 3:
                    bonus += lvl - 2
                    reasons.append(f"–†–∞–∑–±–æ–π–Ω–∏–∫ L{lvl}: –Ø–¥ (+{lvl - 2} —É—Ä–æ–Ω–∞)")

            elif cls == "–í–æ–∏–Ω":
                if lvl >= 1 and is_first_turn:
                    bonus += self.weapon["damage"]
                    reasons.append(f"–í–æ–∏–Ω L{lvl}: –ü–æ—Ä—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é (+{self.weapon['damage']} —É—Ä–æ–Ω–∞)")
                if lvl >= 3:
                    bonus += 1
                    reasons.append(f"–í–æ–∏–Ω L{lvl}: –°–∏–ª–∞ +1")

            elif cls == "–í–∞—Ä–≤–∞—Ä":
                if lvl >= 1:
                    bonus += 2
                    reasons.append(f"–í–∞—Ä–≤–∞—Ä L{lvl}: –Ø—Ä–æ—Å—Ç—å (+2 —É—Ä–æ–Ω–∞)")

        total_damage = base + bonus
        return total_damage, base, bonus, reasons

    def get_class_display(self):
        return ", ".join([f"{cls} {lvl}" for cls, lvl in self.classes.items()])

    def __str__(self):
        return (
            f"\n=== –ü–µ—Ä—Å–æ–Ω–∞–∂ ===\n"
            f"–ö–ª–∞—Å—Å—ã: {self.get_class_display()}\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {self.health}/{self.max_health}\n"
            f"–°–∏–ª–∞: {self.strength} | –õ–æ–≤–∫–æ—Å—Ç—å: {self.agility} | –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.stamina}\n"
            f"–û—Ä—É–∂–∏–µ: {self.weapon['name']} ({self.weapon['type']}) (—É—Ä–æ–Ω: {self.weapon['damage']})\n"
            f"–ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω: {self.get_base_damage()}\n"
        )


class Monster:
    def __init__(self, template):
        self.name = template["name"]
        self.max_health = template["health"]
        self.health = self.max_health
        self.weapon_damage = template["weapon_damage"]
        self.strength = template["strength"]
        self.agility = template["agility"]
        self.stamina = template["stamina"]
        self.special = template["special"]
        self.reward = template["reward"]
        self.weapon = next(w for w in WEAPONS if w["name"] == self.reward)

    def get_base_damage(self):
        return self.weapon_damage + self.strength

    def __str__(self):
        special_text = self.special if self.special else "–ù–µ—Ç"
        return (
            f"\nüëπ {self.name}\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {self.health}/{self.max_health}\n"
            f"–°–∏–ª–∞: {self.strength} | –õ–æ–≤–∫–æ—Å—Ç—å: {self.agility} | –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.stamina}\n"
            f"–û—Ä—É–∂–∏–µ: {self.weapon['name']} ({self.weapon['type']}) (—É—Ä–æ–Ω: {self.weapon['damage']})\n"
            f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: {special_text}\n"
        )


def random_monster():
    return Monster(random.choice(MONSTERS))


def combat(player, monster):
    print(f"\n{Color.CYAN}‚öîÔ∏è  === –ë–û–ô: {list(player.classes.keys())[0]} vs {monster.name} ==={Color.RESET}")
    turn = "player" if player.agility >= monster.agility else "monster"
    print(f"{Color.YELLOW}üèÉ –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç: {'–ò–≥—Ä–æ–∫' if turn == 'player' else monster.name}{Color.RESET}")
    time.sleep(0.7)

    move_count = 0

    while player.health > 0 and monster.health > 0:
        move_count += 1
        is_first_turn = (move_count == 1)

        print(f"\n{Color.GREEN}--- –•–æ–¥ {move_count} ---{Color.RESET}")
        print(f"–ò–≥—Ä–æ–∫: {player.health}/{player.max_health} ‚ù§Ô∏è")
        print(f"{monster.name}: {monster.health}/{monster.max_health} ‚ù§Ô∏è")
        time.sleep(0.4)

        attacker, target = (player, monster) if turn == "player" else (monster, player)
        attacker_name = "–ò–≥—Ä–æ–∫" if turn == "player" else monster.name
        print(f"\n{Color.MAGENTA}üëâ {attacker_name} –∞—Ç–∞–∫—É–µ—Ç!{Color.RESET}")
        time.sleep(0.3)

        roll = random.randint(1, attacker.agility + target.agility)
        print(f"{Color.BLUE}üé≤ –ë—Ä–æ—Å–æ–∫: {roll} (—É—Å–ø–µ—Ö, –µ—Å–ª–∏ > {target.agility}){Color.RESET}")

        if roll <= target.agility:
            print(f"{Color.GRAY}‚ùå –ü—Ä–æ–º–∞—Ö!{Color.RESET}")
            damage = attacker.get_base_damage()
            print(f"{Color.RED}üí• –ù–æ –Ω–∞–Ω–µ—Å—ë–Ω –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω: {damage}{Color.RESET}")
        else:
            if isinstance(attacker, Character):
                total, base, bonus, reasons = attacker.calculate_total_damage(target, is_first_turn=is_first_turn,
                                                                              move_count=move_count)
                print(f"{Color.RED}üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ! –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω: {base}{Color.RESET}")
                for r in reasons:
                    print(f"   {Color.YELLOW}‚ûï {r}{Color.RESET}")
                damage = total
            else:
                damage = attacker.get_base_damage()
                print(f"{Color.RED}üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ! –ù–∞–Ω–µ—Å–µ–Ω–æ {damage} —É—Ä–æ–Ω–∞{Color.RESET}")

            if isinstance(target, Monster):
                if target.name == "–°–ª–∞–π–º" and attacker.weapon["type"] == "–†—É–±—è—â–∏–π":
                    print(f"{Color.BLUE}üõ°Ô∏è  –°–ª–∞–π–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä—É–±—è—â–∏–π —É—Ä–æ–Ω!{Color.RESET}")
                    damage = 0
                elif target.name == "–°–∫–µ–ª–µ—Ç" and attacker.weapon["type"] == "–î—Ä–æ–±—è—â–∏–π":
                    damage *= 2
                    print(f"{Color.RED}üí• –°–∫–µ–ª–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç —É–¥–≤–æ–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –¥—Ä–æ–±—è—â–µ–≥–æ –æ—Ä—É–∂–∏—è!{Color.RESET}")
                elif target.name == "–ü—Ä–∏–∑—Ä–∞–∫" and attacker.agility > target.agility:
                    damage += 1
                    print(f"{Color.YELLOW}‚ûï –ü—Ä–∏–∑—Ä–∞–∫: +1 —É—Ä–æ–Ω (—Å–∫—Ä—ã—Ç–∞—è –∞—Ç–∞–∫–∞){Color.RESET}")
                elif target.name == "–ì–æ–ª–µ–º" and attacker.strength > target.strength:
                    reduction = target.stamina
                    damage = max(0, damage - reduction)
                    print(f"{Color.BLUE}üõ°Ô∏è  –ì–æ–ª–µ–º: —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–Ω –Ω–∞ {reduction} (–∫–∞–º–µ–Ω–Ω–∞—è –∫–æ–∂–∞){Color.RESET}")

            print(f"{Color.RED}‚Üí –ò—Ç–æ–≥–æ: {damage} —É—Ä–æ–Ω–∞{Color.RESET}")

        target.health -= damage
        print(
            f"{Color.GREEN}‚ù§Ô∏è  –£ {target.name if hasattr(target, 'name') else '–ò–≥—Ä–æ–∫–∞'} –æ—Å—Ç–∞–ª–æ—Å—å {max(0, target.health)} HP{Color.RESET}")

        if isinstance(attacker, Monster) and attacker.name == "–î—Ä–∞–∫–æ–Ω" and move_count % 3 == 0:
            fire_damage = 3
            print(f"{Color.RED}üî• –î—Ä–∞–∫–æ–Ω –¥—ã—à–∏—Ç –æ–≥–Ω—ë–º! –ù–∞–Ω–æ—Å–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {fire_damage} —É—Ä–æ–Ω–∞!{Color.RESET}")
            target.health -= fire_damage
            print(f"{Color.GREEN}‚ù§Ô∏è  –£ {target.name} –æ—Å—Ç–∞–ª–æ—Å—å {max(0, target.health)} HP{Color.RESET}")

        time.sleep(0.8)
        turn = "monster" if turn == "player" else "player"

    return player.health > 0


def show_tutorial():
    print(f"\n{Color.BOLD}üéì –û–ë–£–ß–ï–ù–ò–ï: –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?{Color.RESET}")
    print("\n1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å: –†–∞–∑–±–æ–π–Ω–∏–∫, –í–æ–∏–Ω –∏–ª–∏ –í–∞—Ä–≤–∞—Ä.")
    print("   ‚Ä¢ –†–∞–∑–±–æ–π–Ω–∏–∫: +1 —É—Ä–æ–Ω, –µ—Å–ª–∏ –ª–æ–≤–∫–æ—Å—Ç—å –≤—ã—à–µ —Ü–µ–ª–∏. –ù–∞ 3 —É—Ä–æ–≤–Ω–µ ‚Äî —è–¥.")
    print("   ‚Ä¢ –í–æ–∏–Ω: –í –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –Ω–∞–Ω–æ—Å–∏—Ç –¥–≤–æ–π–Ω–æ–π —É—Ä–æ–Ω. –ù–∞ 3 —É—Ä–æ–≤–Ω–µ ‚Äî +1 —Å–∏–ª–∞.")
    print("   ‚Ä¢ –í–∞—Ä–≤–∞—Ä: +2 —É—Ä–æ–Ω–∞ –≤—Å–µ–≥–¥–∞. –ù–∞ 3 —É—Ä–æ–≤–Ω–µ ‚Äî +1 –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.")
    time.sleep(1)

    print("\n2. –û—Ä—É–∂–∏–µ –∏–º–µ–µ—Ç —Ç–∏–ø: –†—É–±—è—â–∏–π, –ö–æ–ª—é—â–∏–π, –î—Ä–æ–±—è—â–∏–π.")
    print("   ‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω—Å—Ç—Ä—ã —Å–ª–∞–±—ã –∏–ª–∏ —É—Å—Ç–æ–π—á–∏–≤—ã –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º —Ç–∏–ø–∞–º.")

    print("\n3. –ë–æ–∏ –∏–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Ö–æ–¥–∞–º.")
    print("   ‚Ä¢ –î–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ –Ω–∞–Ω–æ—Å–∏—Ç—Å—è –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω.")

    print("\n4. –ü–æ—Å–ª–µ –ø–æ–±–µ–¥—ã:")
    print("   ‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
    print("   ‚Ä¢ –ú–æ–∂–Ω–æ –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤ –õ–Æ–ë–û–ú –∫–ª–∞—Å—Å–µ (–º—É–ª—å—Ç–∏–∫–ª–∞—Å—Å!).")
    print("   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º ‚Äî 3 —É—Ä–æ–≤–Ω—è —Å—É–º–º–∞—Ä–Ω–æ.")
    print("   ‚Ä¢ –í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∞—Ç –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä—É–∂–∏–µ –Ω–∞ –¥—Ä–æ–ø —Å –º–æ–Ω—Å—Ç—Ä–∞.")

    print("\n5. –ü–æ–±–µ–¥–∏—Ç–µ 5 –º–æ–Ω—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥ ‚Äî –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
    input(f"\n{Color.YELLOW}> –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É...{Color.RESET}")


def choose_class():
    print("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
    print("1. –†–∞–∑–±–æ–π–Ω–∏–∫")
    print("2. –í–æ–∏–Ω")
    print("3. –í–∞—Ä–≤–∞—Ä")
    while True:
        c = input("> –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ").strip()
        if c == "1":
            return "–†–∞–∑–±–æ–π–Ω–∏–∫"
        elif c == "2":
            return "–í–æ–∏–Ω"
        elif c == "3":
            return "–í–∞—Ä–≤–∞—Ä"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")


def choose_upgrade_class(current_classes):
    classes = ["–†–∞–∑–±–æ–π–Ω–∏–∫", "–í–æ–∏–Ω", "–í–∞—Ä–≤–∞—Ä"]
    print("\nüìà –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:")
    for i, cls in enumerate(classes, 1):
        lvl = current_classes.get(cls, 0)
        print(f"{i}. {cls} (—É—Ä–æ–≤–µ–Ω—å: {lvl})")
    while True:
        c = input("> –ù–æ–º–µ—Ä: ").strip()
        if c in ["1", "2", "3"]:
            cls = classes[int(c) - 1]
            if sum(current_classes.values()) >= 3:
                print("‚ùå –ú–∞–∫—Å. —É—Ä–æ–≤–µ–Ω—å 3 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
                return None
            return cls
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")


def offer_weapon_change(player, weapon):
    print(f"\nüéÅ –í—ã–ø–∞–ª–æ: {weapon['name']} ({weapon['type']}) (—É—Ä–æ–Ω: {weapon['damage']})")
    print(f"–¢–µ–∫—É—â–µ–µ: {player.weapon['name']} ({player.weapon['type']}) (—É—Ä–æ–Ω: {player.weapon['damage']})")
    while True:
        c = input("> –ó–∞–º–µ–Ω–∏—Ç—å? (–¥/–Ω): ").strip().lower()
        if c in ["–¥", "–¥–∞", "y", "yes"]:
            player.weapon = weapon
            print("‚úÖ –û—Ä—É–∂–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ!")
            break
        elif c in ["–Ω", "–Ω–µ—Ç", "n", "no"]:
            print("‚ùå –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ.")
            break
        else:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ '–¥' –∏–ª–∏ '–Ω'.")


def load_stats():
    if os.path.exists("game_stats.json"):
        with open("game_stats.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return {"best_run": 0}


def save_stats(stats):
    with open("game_stats.json", "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)


def main():
    print(f"{Color.CYAN}{Color.BOLD}üéÆ –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ê–í–¢–û–ë–ê–¢–¢–õ–ï–†!{Color.RESET}")

    if input("\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ? (–¥/–Ω): ").strip().lower() in ['–¥', '–¥–∞', 'y', 'yes']:
        show_tutorial()

    stats = load_stats()
    print(f"\nüìä –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stats['best_run']} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥")

    while True:
        char_class = choose_class()
        player = Character(char_class)
        victories = 0

        print(f"\nüéâ –°–æ–∑–¥–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂:")
        print(player)
        input("\n> –ù–∞–∂–º–∏—Ç–µ Enter...")

        while player.health > 0 and victories < 5:
            print(f"\nüî• –ë–æ–π #{victories + 1}")
            monster = random_monster()
            print(f"\nüëπ {monster.name}")
            print(monster)
            input("\n> –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è...")

            if combat(player, monster):
                victories += 1
                player.health = player.max_health
                print(f"\n{Color.GREEN}‚ù§Ô∏è  –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.{Color.RESET}")

                if player.get_total_level() < 3:
                    cls = choose_upgrade_class(player.classes)
                    if cls:
                        player.classes[cls] = player.classes.get(cls, 0) + 1
                        print(f"üìà –£—Ä–æ–≤–µ–Ω—å {cls} –ø–æ–≤—ã—à–µ–Ω!")

                offer_weapon_change(player, monster.weapon)
                input("\n> –ù–∞–∂–º–∏—Ç–µ Enter...")
            else:
                break

        if victories >= 5:
            print(f"\n{Color.YELLOW}{Color.BOLD}üèÜ –ü–û–ë–ï–î–ê! –í—ã –ø—Ä–æ—à–ª–∏ –∏–≥—Ä—É!{Color.RESET}")
            if victories > stats["best_run"]:
                stats["best_run"] = victories
                save_stats(stats)
                print("üéâ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!")
            break
        else:
            print(f"\nüíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ {victories} –ø–æ–±–µ–¥.")
            if victories > stats["best_run"]:
                stats["best_run"] = victories
                save_stats(stats)
                print("–ù–æ —ç—Ç–æ –≤–∞—à –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!")

            if input("\nüîÑ –ù–æ–≤—ã–π –≥–µ—Ä–æ–π? (–¥/–Ω): ").strip().lower() not in ['–¥', '–¥–∞', 'y', 'yes']:
                break

    print(f"\n{Color.CYAN}üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!{Color.RESET}")


if __name__ == "__main__":
    main()